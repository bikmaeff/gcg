exp_name: bnn/deterministic
log_level: debug

###############
### Offline ###
###############

offline:
  # all paths are relative to gcg/data
  data: bnn/datasets/SquareClutteredEnv_random30000
  data_holdout: bnn/datasets/SquareClutteredConeEnv_random5000

  init_checkpoint:
  init_restore: ['image', 'observation', 'action', 'rnn', 'output'] # what parts of graph to restore? given as a list which may contain ['image', 'observation', 'action', 'rnn', 'output']

#################
### Algorithm ###
#################

alg:

  ### Environment ###

  env: "SquareClutteredEnv(params={'hfov': 120, 'do_back_up': False, 'collision_reward_only': True, 'collision_reward': -1, 'speed_limits': [2., 2.]})"
  normalize_env: False

  ### Steps ###

  total_steps: 2.5e+5

  update_target_after_n_steps: 5.e+3 # after which the target network can be updated
  update_target_every_n_steps: 5.e+3 # how often to update target network

  save_every_n_steps: 1.e+4
  log_every_n_steps: 1.e+3

  batch_size: 32

##############
### Policy ###
##############

policy:
  N: 16 # label horizon
  H: 16 # model horizon
  gamma: 0.99 # discount factor
  obs_history_len: 4 # number of previous observations to concatenate (inclusive)

  use_target: False # target network?
  separate_target_params: True # if target network, separate parameters?
  clip_cost_target_with_dones: False # if False, extends end of episodes by assuming 0 rewards and random actions taken

  get_action_test: # how to select actions at test time (i.e., when gathering samples)
    H: 16
    type: random # <random/lattice> action selection method
    random:
      K: 4096
    lattice:

  get_action_target: # for computing target values
    H: 16
    type: random # <random/lattice>
    random:
      K: 100
    lattice:

  image_graph: # CNN
    filters: [64, 32, 32, 32]
    kernels: [8, 4, 3, 3]
    strides: [4, 2, 2, 2]
    padding: SAME
    conv_activation: relu # <relu>
    output_activation: relu # <relu/tanh/sigmoid/softmax>
    normalizer: # <layer_norm/weight_norm/batch_norm>
    batch_norm_decay: 0.9

  observation_graph: # fully connected
    hidden_layers: [256]
    hidden_activation: relu # <relu/tanh>
    output_dim: 128 # this is the hidden size of the rnn
    output_activation: relu # <relu/tanh/sigmoid/softmax>
    normalizer: # <layer_norm/weight_norm/batch_norm>
    batch_norm_decay: 0.9

  action_graph: # fully connected
    hidden_layers: [16]
    hidden_activation: relu # <relu/tanh>
    output_dim: 16
    output_activation: relu # <relu/tanh/sigmoid/softmax>
    normalizer: # <layer_norm/weight_norm/batch_norm>
    batch_norm_decay: 0.9

  rnn_graph:
    num_cells: 1
    cell_type: mulint_lstm # <rnn/mulint_rnn/lstm/mulint_lstm>
    cell_args: # If you need to pass variables to cells
        {}

  output_graph: # fully connected
    hidden_layers: [16]
    hidden_activation: relu # <relu/tanh>
    normalizer: # <layer_norm/weight_norm/batch_norm>
    batch_norm_decay: 0.9
#    num_data: 30971 # TODO(rowan): find a way to not hard code this in the future.
#    bnn_method: bootstrap # TODO(rowan) concrete_dropout or bayes_by_backprop or probabilistic_backprop or bootstrap

  only_completed_episodes: False # only train with fully completed episodes?

  # training
  weight_decay: 1.e-6 # L2 regularization
  lr_schedule: # learning rate schedule
    endpoints: [[0, 1.e-4], [1.e+6, 1.e-4]]
    outside_value: 1.e-4
  grad_clip_norm: 10 # clip the gradient magnitude

  # device
  gpu_device: 0
  gpu_frac: 0.6

  class: GCGPolicy # <GCGPolicy> model class
  GCGPolicy: &idGCGPolicy
    # actions, yhats, bhats, values, goals are available
    rew_fn: "-yhats['coll']"

    outputs:
      - name: 'coll'
        use_yhat: True
        # pre_yhats, inputs
        yhat: "tf.nn.sigmoid(pre_yhats['coll'])"
        yhat_loss: 'xentropy'
        # rewards, goals, target_inputs, target_yhats, target_bhats, target_values
        yhat_label: "tf.cast(tf.cumsum(target_inputs['coll'], axis=1) >= 1.0, tf.float32)"
        use_bhat: False
        # pre_bhats, inputs
        bhat: 'None'
        # yhats, bhats, goals, h
        value: 'None'
        # rewards, goals, target_inputs, target_yhats, target_bhats, target_values, h
        bhat_label: 'None'
        bhat_loss: 'None'
        clip_with_done: False