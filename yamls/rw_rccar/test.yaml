exp_name: rw_rccar/test
seed: 1
log_level: debug

#################
### Algorithm ###
#################

alg:

  async:
    train:
      save_every_n_steps: 3.e+3
      reset_every_n_steps: 

    inference:
      ssh: "gkahn@ahsoka.banatao.berkeley.edu"
      remote_dir: "/home/gkahn/code/gcg/data"

      save_every_n_steps: 50 # 3.e+2 # for dt = 0.25, this is about 1.25 minutes

  ### Environment ###

  env:
    class: RWrccarEnv
    params:
      speed_limits: [0.2, 0.2]
      collision_reward_only: True
      collision_reward: -1
      obs_shape: [36, 64, 1]
  max_path_length: 1000
  n_envs: 1 # number of training environments
  render: False


  ### Offpolicy data ###

  offpolicy: # rosbag folder dirs, not pkl dirs
  num_offpolicy: # number of offpolicy datapoints to load

  ### Steps ###

  total_steps: 14.4e+3 # 1 hours worth, corresponding to number of env.step(...) calls

  sample_after_n_steps: -1
  onpolicy_after_n_steps: 1.e+3 # take random actions until this many steps is reached

  learn_after_n_steps: -1 # when to start training the model
  train_every_n_steps: 0.25 # number of calls to model.train per env.step (if fractional, multiple trains per step)
  eval_every_n_steps: 5.e+2 # how often to evaluate policy in env_eval

  update_target_after_n_steps: -1 # after which the target network can be updated
  update_target_every_n_steps: 5.e+3 # how often to update target network

  save_every_n_steps: 1.e+3 # how often to save experiment data
  log_every_n_steps: 1.e+3 # how often to print log information


  ### Exploration ###

  exploration_strategies:
    # endpoints: [[step, value], [step, value], ...]
    GaussianStrategy: # additive gaussian noise
      endpoints: [[0, 1.0], [9.6e+3, 0.1], [14.4e+3, 0.01]]
      outside_value: 0.01
    EpsilonGreedyStrategy:
      endpoints: [[0, 1.0], [9.6e+3, 0.1], [14.4e+3, 0.01]]
      outside_value: 0.01


  ### Replay pool

  batch_size: 32 # per training step
  replay_pool_size: 1.e+6
  replay_pool_sampling: uniform # <uniform/terminal>
  replay_pool_params:
    terminal:
      frac: 0.5 # fraction of batch that from an end of an episode


  ### Saving data

  save_rollouts: True
  save_rollouts_observations: True # False saves space
  save_env_infos: True # False saves space

##############
### Policy ###
##############

policy:
  N: 12 # label horizon
  H: 12 # model horizon
  gamma: 0.99 # discount factor
  obs_history_len: 4 # number of previous observations to concatenate (inclusive)

  use_target: False # target network?
  separate_target_params: True # if target network, separate parameters?
  get_action_test: # how to select actions at test time (i.e., when gathering samples)
    H: 12
    type: random # <random/lattice> action selection method
    random:
      K: 2048
    lattice:

  get_action_target: # for computing target values
    H: 12
    type: random # <random/lattice>
    random:
      K: 100
    lattice:

  image_graph: # CNN
    filters: [64, 32, 32, 32]
    kernels: [8, 4, 3, 3]
    strides: [4, 2, 2, 2]
    padding: SAME
    conv_activation: relu # <relu>
    output_activation: relu # <relu/tanh/sigmoid/softmax>
    normalizer: # <layer_norm/weight_norm/batch_norm>
    batch_norm_decay: 0.9

  observation_graph: # fully connected
    hidden_layers: [256]
    hidden_activation: relu # <relu/tanh>
    output_dim: 128 # this is the hidden size of the rnn
    output_activation: relu # <relu/tanh/sigmoid/softmax>
    normalizer: # <layer_norm/weight_norm/batch_norm>
    batch_norm_decay: 0.9

  action_graph: # fully connected
    hidden_layers: [16]
    hidden_activation: relu # <relu/tanh>
    output_dim: 16
    output_activation: relu # <relu/tanh/sigmoid/softmax>
    normalizer: # <layer_norm/weight_norm/batch_norm>
    batch_norm_decay: 0.9

  rnn_graph:
    num_cells: 1
    cell_type: mulint_lstm # <rnn/mulint_rnn/lstm/mulint_lstm>
    cell_args: # If you need to pass variables to cells
      use_layer_norm: False

  output_graph: # fully connected
    hidden_layers: [16]
    hidden_activation: relu # <relu/tanh>
    normalizer: # <layer_norm/weight_norm/batch_norm>
    batch_norm_decay: 0.9

  only_completed_episodes: False # only train with fully completed episodes?

  # training
  weight_decay: 0.5 # L2 regularization
  lr_schedule: # learning rate schedule
    endpoints: [[0, 1.e-4], [1.e+6, 1.e-4]]
    outside_value: 1.e-4
  grad_clip_norm: 10 # clip the gradient magnitude

  # device
  gpu_device: 0
  gpu_frac: 0.95
  
  class: GCGPolicy # <GCGPolicy> model class
  GCGPolicy: &idGCGPolicy
    # actions, yhats, bhats, values, goals are available    
    rew_fn: "1. - yhats['coll']"

    outputs:
      - name: 'coll'
        use_yhat: True
        # pre_yhats, inputs
        yhat: "tf.nn.sigmoid(pre_yhats['coll'])"
        yhat_loss: 'xentropy'
        # rewards, goals, target_inputs, target_yhats, target_bhats, target_values
        yhat_label: "tf.cast(tf.cumsum(target_inputs['coll'], axis=1) >= 1.0, tf.float32)"
        use_bhat: False
        # pre_bhats, inputs
        bhat: 'None'
        # yhats, bhats, goals, h
        value: 'None' 
        # rewards, goals, target_values, target_yhats, target_bhats, h 
        bhat_label: 'None'
        bhat_loss: 'None' 
        clip_with_done: False
